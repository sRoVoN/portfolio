{
  "hero": {
    "title": "سلام، من یک توسعه‌دهنده فرانت‌اند هستم",
    "subtitle": "توسعه‌دهنده‌ای با تمرکز بر ساخت وب‌سایت‌های سریع، زیبا و دسترس‌پذیر.",
    "logoAlt": "لوگوی sRoVoN",
    "projectInfo": "می‌توانید چند پروژه‌ی شخصی از من را <link>اینجا</link> ببینید."
  },
  "nav": {
    "home": "خانه",
    "about": "درباره من",
    "projects": "پروژه‌ها",
    "contact": "تماس"
  },
  "themeToggle": {
    "light": "روشن",
    "dark": "تاریک"
  },
  "sidebar": {
    "name": "سوده آروین",
    "logoAlt": "sRoVoN لوگو",
    "title": "توسعه‌دهنده فرانت‌اند",
    "bio": "عاشق کدنویسی و طراحی مینیمال",
    "avatar": "@/public/avatar.png"
  },
  "about": {
    "intro": "من یک توسعه‌دهنده فرانت‌اند هستم با حدود سه سال تجربه عملی در ساخت برنامه‌های وب سریع و مقیاس‌پذیر. یادگیری را با دوره‌های آفلاین از Code With Mosh شروع کردم و دوره React را در سایت تاپ‌لرن به پایان رساندم. سپس با استفاده از آموزش‌های یوتیوب و دیگر منابع آنلاین، مهارت‌هایم را گسترش دادم. پروژه‌های شخصی متعددی را با تمرکز بر کدنویسی تمیز، تجربه کاربری و عملکرد بالا توسعه داده‌ام. به تکنولوژی‌های HTML، CSS، JavaScript، React، Next.js، React Query، Redux، Tailwind CSS، Bootstrap، Material UI و Git مسلط هستم. عاشق یادگیری مداوم هستم و مشتاقم در یک تیم حرفه‌ای به رشد خود ادامه دهم و در تولید محصولات واقعی نقش داشته باشم."
  },
  "projects": {
    "title": "پروژه‌ها",
    "viewAll": "مشاهده همه پروژه‌ها",
    "liveDemo": "دموی زنده",
    "sourceCode": "کد منبع",
    "forecast-app": {
      "title": "اپلیکیشن پیش‌بینی هوا",
      "short": "نمایش آب‌وهوا به‌صورت فعلی و پیش‌بینی‌شده.",
      "full": "این پروژه با دریافت داده از OpenWeather API وضعیت فعلی و پیش‌بینی ساعتی و روزانه را نمایش می‌دهد. از کتابخانه Luxon برای نمایش زمان محلی استفاده شده است.",
      "detailsTitle": "ویژگی‌های کلیدی",
      "back": " بازگشت به پروژه‌ها ← ",
      "details": [
        "استفاده از API خارجی برای دریافت داده‌های دقیق آب‌وهوا",
        "استفاده از Luxon برای نمایش زمان محلی هر شهر",
        "امکان افزودن یک شهر دلخواه در کنار ۵ شهر پیش‌فرض با استفاده از sessionStorage",
        "امکان انتخاب واحد دما (متریک، امپریال یا استاندارد) در کنار نام شهر، برای دریافت پاسخ دقیق‌تر از API",
        "نمایش رنگ بک‌گراند پویا بر اساس دمای فعلی (مثلاً آبی برای آب‌وهوای سرد و نارنجی برای گرم)",
        "استفاده از toast و alert برای اطلاع‌رسانی‌های کاربردی مثل ورود شهر تکراری یا خطا در اتصال",
        "پیاده‌سازی یک الگوریتم برای پاک‌سازی و ساده‌سازی داده‌های دریافتی از API پیش از ارسال به کامپوننت‌ها (فیلدهای اضافی حذف شده‌اند)",
        "واکنش‌گرا (responsive) با تفاوت طراحی در دسکتاپ و موبایل (مثل جایگزینی دکمه‌ها با آیکون دایره‌ای در موبایل)"
      ]
    },

    "calculator-app": {
      "title": "اپلیکیشن ماشین‌حساب",
      "short": "ماشین‌حساب ساده و کاربردی با طراحی تمیز.",
      "full": "این پروژه یک ماشین‌حساب ساده اما ساختاریافته است که با استفاده از React و Context API پیاده‌سازی شده و تمرکز اصلی آن بر مدیریت وضعیت (state management) و جداسازی منطق از رابط کاربری بوده است.",
      "detailsTitle": "ویژگی‌های کلیدی",
      "back": " بازگشت به پروژه‌ها ← ",
      "details": [
        "استفاده از React و Context API برای مدیریت وضعیت کلی ماشین‌حساب",
        "جداسازی منطق عملیات ریاضی از رابط کاربری برای افزایش خوانایی و قابلیت نگهداری کد",
        "پشتیبانی از عملیات پایه شامل جمع، تفریق، ضرب و تقسیم",
        "به‌کارگیری useState و useContext برای تعریف و به‌روزرسانی مقادیر num، sign و res",
        "تفکیک و کنترل دقیق رفتار دکمه‌ها با توجه به نوع (عدد، عملگر، مساوی، پاک کردن و غیره)",
        "طراحی مینیمال و واکنش‌گرا با استفاده از CSS و رعایت اصول UX ساده و کاربردی"
      ]
    },

    "movies-app": {
      "title": "اپلیکیشن فیلم‌ها",
      "short": "جستجو و مشاهده اطلاعات فیلم‌ها از API.",
      "full": "در این پروژه کاربران می‌توانند فیلم‌ها را بر اساس عنوان (title) و سال (year) از API سایت OMDb جستجو کرده و اطلاعات کامل آن‌ها را مشاهده کنند.",
      "detailsTitle": "ویژگی‌های کلیدی",
      "back": " بازگشت به پروژه‌ها ← ",
      "details": [
        "استفاده از React و Context API برای مدیریت وضعیت جستجو و داده‌های فیلم‌ها",
        "امکان جستجو بر اساس عنوان فیلم و سال ساخت به صورت همزمان",
        "برقراری ارتباط با API رسمی OMDb برای دریافت داده‌های دقیق و به‌روز فیلم‌ها",
        "نمایش پیام‌های خطا و وضعیت بارگذاری (loading) به کاربر جهت بهبود تجربه کاربری",
        "مدیریت کامل وضعیت اپلیکیشن شامل داده‌ها، خطاها، و ورودی‌های جستجو با useState و Context",
        "امکان به‌روزرسانی نتایج جستجو با کلیک روی دکمه Search و دریافت اطلاعات جدید",
        "طراحی واکنش‌گرا و سازگار با دستگاه‌های مختلف (موبایل، تبلت و دسکتاپ) برای تجربه کاربری بهینه"
      ]
    },

    "tasks-app": {
      "title": "اپلیکیشن مدیریت کارها",
      "short": "اپلیکیشن ساده برای مدیریت و جابه‌جایی تسک‌ها به صورت Drag & Drop.",
      "full": "در این پروژه امکان افزودن، ویرایش، حذف و جابه‌جایی تسک‌ها میان دو لیست (انجام‌شده و انجام‌نشده) با استفاده از Drag & Drop فراهم شده است. رابط کاربری با React و TypeScript طراحی شده و از کتابخانه react-beautiful-dnd برای پیاده‌سازی جابه‌جایی استفاده شده است.",
      "back": "بازگشت به پروژه‌ها ←",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "استفاده از React و TypeScript برای پیاده‌سازی ساختار امن و منعطف",
        "امکان افزودن تسک جدید و ذخیره آن در لیست",
        "ویرایش تسک‌ها با امکان ذخیره تغییرات",
        "حذف تسک‌ها به‌صورت آنی از لیست",
        "قابلیت تیک‌زدن و انتقال تسک‌ها به لیست «انجام‌شده»",
        "استفاده از کتابخانه react-beautiful-dnd برای Drag & Drop بین ستون‌ها",
        "به‌روزرسانی بلادرنگ وضعیت انجام یا عدم انجام تسک‌ها",
        "رابط کاربری ساده و واکنش‌گرا با استفاده از CSS ماژولار",
        "تفکیک کامل کامپوننت‌ها برای افزایش خوانایی و قابلیت نگهداری کد"
      ]
    },
    "pagination-app": {
      "title": "اپلیکیشن صفحه‌بندی",
      "short": "نمایش داده‌ها به‌صورت صفحه‌بندی‌شده.",
      "full": "در این اپلیکیشن داده‌ها از یک API خارجی (JSONPlaceholder) به‌صورت مرحله‌ای و صفحه‌بندی‌شده دریافت می‌شوند. این روش باعث می‌شود حجم زیادی از اطلاعات به‌صورت یک‌باره بارگیری نشود و از کندی یا کرش کردن اپ جلوگیری شود. با استفاده از مکانیزم صفحه‌بندی، اپلیکیشن تنها داده‌های مورد نیاز هر صفحه را دریافت می‌کند که به بهبود کارایی، تجربه کاربری (UX) و مقیاس‌پذیری کمک می‌کند.",
      "back": " بازگشت به پروژه‌ها ← ",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "استفاده از React و useState برای مدیریت وضعیت صفحه و داده‌ها",
        "دریافت داده‌ها از API خارجی (JSONPlaceholder) به‌صورت صفحه‌بندی‌شده",
        "به‌کارگیری useEffect برای همگام‌سازی داده‌ها با تغییر شماره صفحه",
        "استفاده از کامپوننت‌های آماده MUI مانند Pagination، Typography و Box برای ساخت UI زیبا و واکنش‌گرا",
        "نمایش عنوان و محتوای پست‌ها به تفکیک هر صفحه",
        "کنترل تعداد آیتم‌ها در هر صفحه از طریق query string",
        "طراحی واکنش‌گرا و مدرن با استفاده از Material UI و رنگ‌بندی سفارشی"
      ]
    },

    "infinite-scrolling-app": {
      "title": "اپلیکیشن اسکرول بی‌نهایت",
      "short": "بارگذاری محتوا با اسکرول کاربر.",
      "full": "این پروژه با استفاده از Intersection Observer API در React پیاده‌سازی شده و زمانی که کاربر به انتهای صفحه نزدیک می‌شود، به صورت خودکار پست‌های جدید از API واکشی و به لیست قبلی اضافه می‌گردند. این رفتار باعث تجربه کاربری روان‌تر و بهینه‌تری می‌شود.",
      "back": "← بازگشت به پروژه‌ها",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "پیاده‌سازی با React و استفاده از useState، useEffect و useRef برای کنترل وضعیت و DOM",
        "استفاده از Intersection Observer API برای تشخیص رسیدن کاربر به انتهای صفحه",
        "بارگذاری تدریجی داده‌ها با پارامترهای page و limit از JSONPlaceholder API",
        "مدیریت خطا در هنگام واکشی داده‌ها با نمایش پیام مناسب",
        "ساختار ماژولار و قابل نگهداری برای توسعه‌های آتی",
        "طراحی ساده، تمیز با استفاده از CSS پایه",
        "کاهش بار اولیه صفحه با (Lazy Loading) محتوای بعدی"
      ]
    },
    "crona-app": {
      "title": "اپلیکیشن ردیاب کرونا",
      "short": "نمایش نمودار و آمار به‌روز بیماری کرونا با مدیریت پیشرفته داده‌ها و کش کردن خودکار.",
      "full": "این داشبورد تعاملی با استفاده از API رسمی Robert Koch-Institut، داده‌های روزانه بیماری کرونا را به تفکیک ایالت‌ها و کشور نمایش می‌دهد. در این پروژه، با بهره‌گیری از React Query، مدیریت هوشمند درخواست‌ها و کش کردن خودکار داده‌ها انجام شده و به‌روزرسانی لحظه‌ای فراهم شده است. همچنین، با پیاده‌سازی TypeScript، اطمینان از صحت نوع داده‌ها و افزایش کیفیت و قابلیت نگهداری کد حاصل شده است. رابط کاربری شامل نمودارهای تعاملی با Recharts و کارت‌های آماری است که کاربر می‌تواند بازه زمانی و منطقه مورد نظر خود را انتخاب کند.",
      "detailsTitle": "ویژگی‌های کلیدی",
      "back": " بازگشت به پروژه‌ها ← ",
      "details": [
        "مدیریت پیشرفته داده‌ها با React Query برای کش کردن، به‌روزرسانی خودکار و مدیریت درخواست‌ها",
        "استفاده از TypeScript برای تضمین ایمنی نوع و بهبود کیفیت کد",
        "دریافت هم‌زمان داده‌ها (Promise.all) از API رسمی سلامت عمومی",
        "نمایش آمار روزانه ابتلا، بهبودی و مرگ‌ومیر با نمودارهای تعاملی (Recharts)",
        "فیلتر و انتخاب بازه‌های زمانی دلخواه توسط کاربر",
        "پیاده‌سازی رابط کاربری واکنش‌گرا و بهینه‌سازی عملکرد با تفکیک کامپوننت‌ها",
        "امکان انتخاب ایالت یا کشور و به‌روزرسانی لحظه‌ای نمودارها و کارت‌ها"
      ]
    },
    "pomodoro-app": {
      "title": "اپلیکیشنن پومودورو",
      "short": "زمان‌سنج مدیریت تمرکز با روش پومودورو.",
      "full": "این اپلیکیشن یک تایمر پومودورو است که به شما کمک می‌کند زمان‌های کار و استراحت خود را به صورت منظم مدیریت کنید. حالت‌های مختلفی شامل پومودورو، استراحت کوتاه و استراحت طولانی دارد و رابط کاربری آن با استفاده از Material UI طراحی شده است.",
      "back": " بازگشت به پروژه‌ها ← ",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "امکان تغییر بین سه حالت: پومودورو، استراحت کوتاه و استراحت بلند",
        "نمایش زمان به صورت دقیقه و ثانیه با به‌روزرسانی خودکار",
        "استفاده از React و useState/useEffect برای مدیریت زمان و وضعیت برنامه",
        "طراحی واکنش‌گرا و مینیمال با استفاده از Material UI",
        "امکان شروع، توقف و ریست تایمر",
        "تغییر رنگ پس‌زمینه متناسب با حالت انتخاب شده",
        "کدنویسی تمیز و قابل نگهداری با جداسازی منطق از رابط کاربری"
      ]
    },
    "bingo-app": {
      "title": "اپلیکیشن بینگو",
      "short": "یک بازی تعاملی بینگو با قابلیت شافل کارت‌ها و تشخیص الگوهای برنده.",
      "full": "این اپلیکیشن بازی بینگو با استفاده از React ساخته شده است. کارت‌ها به صورت رندوم شافل می‌شوند و کارت وسط ثابت باقی می‌ماند. کاربران با کلیک روی خانه‌های کارت، سلول‌ها را علامت می‌زنند و در صورت تکمیل الگوی برنده، بازی با نمایش کنفتی و پخش صدا به کاربر تبریک می‌گوید.",
      "back": " بازگشت به پروژه‌ها ← ",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "استفاده از React و useState برای مدیریت وضعیت کارت‌ها و بازی",
        "شناسایی و تشخیص الگوهای برنده بینگو با الگوریتم اختصاصی",
        "حفظ کارت وسط (fixed card) هنگام شافل کردن کارت‌ها",
        "نمایش افکت‌های بصری شامل لرزش کارت کلیک‌شده، خط خوردن سلول‌ها و پخش صدای تبریک هنگام تشخیص الگوی برنده",
        "طراحی واکنش‌گرا با Tailwind CSS برای نمایش مناسب در دستگاه‌های مختلف"
      ]
    },
    "blog-app": {
      "title": "اپلیکیشن بلاگ",
      "short": "یک اپلیکیشن بلاگ با قابلیت مدیریت پست‌ها و واکنش کاربران، ساخته‌شده با Redux Toolkit و React.",
      "full": "این اپلیکیشن بلاگ با استفاده از React، Redux Toolkit و React Router ساخته شده است. پست‌ها از API عمومی (JSONPlaceholder) واکشی می‌شوند و قابلیت‌هایی مانند ایجاد پست جدید، ویرایش، حذف و افزودن واکنش‌ها (Reactions) وجود دارد. داده‌ها با localStorage همگام‌سازی می‌شوند تا تغییرات کاربران حتی پس از بارگذاری مجدد مرورگر حفظ شود. همچنین از Entity Adapter برای مدیریت داده‌ها و مرتب‌سازی بر اساس تاریخ استفاده شده است.",
      "back": " بازگشت به پروژه‌ها ← ",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "مدیریت وضعیت با Redux Toolkit و Entity Adapter",
        "واکشی پست‌ها از JSONPlaceholder همراه با فیلتر و محدودیت تعداد",
        "قابلیت CRUD کامل: افزودن، ویرایش و حذف پست‌ها",
        "افزودن واکنش‌ها (لایک، قلب، خنده، ناراحتی و...) به هر پست",
        "ذخیره‌سازی و همگام‌سازی داده‌ها در localStorage",
        "مدیریت کاربران مرتبط با پست‌ها",
        "استفاده از React Router برای ناوبری بین صفحات مختلف"
      ]
    },
    "user-app": {
      "title": "اپلیکیشن مدیریت کاربران",
      "short": "یک اپلیکیشن CRUD برای مدیریت کاربران با استفاده از Redux Toolkit Query و ذخیره‌سازی محلی.",
      "full": "این اپلیکیشن با استفاده از React، Redux Toolkit Query و React Router پیاده‌سازی شده است. کاربران را از API عمومی (JSONPlaceholder) واکشی می‌کند و هم‌زمان امکان مدیریت کامل کاربران سفارشی (ذخیره‌شده در localStorage) را نیز فراهم می‌کند. قابلیت‌هایی مانند افزودن کاربر جدید، ویرایش اطلاعات، مشاهده جزئیات و حذف کاربر وجود دارد. همچنین داده‌ها به صورت ترکیبی از API و localStorage همگام‌سازی می‌شوند و تجربه کاربری روان و بدون رفرش ایجاد می‌کنند.",
      "back": " بازگشت به پروژه‌ها ← ",
      "detailsTitle": "ویژگی‌های کلیدی",
      "details": [
        "استفاده از Redux Toolkit Query برای مدیریت درخواست‌ها و کش داده‌ها",
        "ادغام کاربران API (JSONPlaceholder) با کاربران محلی ذخیره‌شده در localStorage",
        "قابلیت CRUD کامل: افزودن، ویرایش، حذف و مشاهده جزئیات کاربران",
        "به‌روزرسانی خوش‌بینانه (Optimistic Update) برای ایجاد تجربه روان بدون نیاز به رفرش",
        "مدیریت مسیرها با React Router (صفحه لیست کاربران، جزئیات، افزودن و ویرایش)",
        "استفاده از TypeScript برای ایمنی نوع داده‌ها",
        "استایل‌دهی ساده و واکنش‌گرا با SCSS"
      ]
    }
  },
  "contact": {
    "title": "تماس با من",
    "text": "همیشه آماده‌ام درباره فرصت‌های شغلی، همکاری یا پروژه‌های جدید صحبت کنم. برای ارتباط می‌توانید از طریق ایمیل یا گیت‌هاب اقدام کنید.",
    "emailLabel": "ایمیل",
    "emailValue": "soodeh.arvin@gmail.com",
    "githubLabel": "گیت‌هاب",
    "githubUrl": "https://github.com/srovon",
    "linkdinUrl": "https://www.linkedin.com/in/soodeh-arvin-sRoVoN",
    "linkdinLabel": "لینکدین"
  }


}
